1. Write about the operator precedence?

Site 1: https://developer.mozilla.org 

There are different number of operators and given the precedence from highest to lowest.

case 1: If there are two operators with different precedence level, then the higher operator gets executed first. 

Example 1: 3 + 4 * 5 => 23 => Here the multiplication operator gets evaluated first as it got the higher operator precedence and then the lowest precedence. 

case 2: If two operators with same precedence level, there are cases that we will evaluate from left-to-right or right-to-left. (Associativity determines whether it has to be evaluated left-to-right or right-to-left)

Example 2: 20 / 4 * 10 => 50 will be the output, In the precendence table the expression should be evaluated from the left-to-right for multlication and division as there is a same precedence.

PRECENDENCE TABLE: Higher to Lower Left-to-Right Associativity

1. MemberAccess - It access the properties and methods of an 
object using the '.' from left to right
2. Computer Member Access - It is another method to access the properties and objects using the '[]' from left to right 
3. Function call - It is a javascript procedure and that performs a task or performs a value. functionName(argument); It evaluates from left to right
4. Multiplication - It performs the multiplication and calculates from left to right.'*'
5. Division - Same operator precedence as multiplication - '/'
6. Remainder - Evaluates the expression and gives the remainder of the given operands.Same precedence as multiplication and division. '%'
7. Addition - It evaluates the expression from left to right and given the next predence to multiplication,Division and Remainder. '+'
8. Subtraction - Same precedence as addition and evaluated from left to right. '-'
9. Bitwise Left Shift - This operator evaluates from left to right and it shifts the bits to left side and '<<'
10. Bitwise Right Shift - This operator evaluated from left to right and it shifts the bits to right side and  '>>'
11. Bitwise Unsigned Right Shift - '>>>'
12. LessThan - It evaluates the expression from left to right '<'. It compares the left operand with the right operand
13. LessThan OR Equalto - It evaluates the expression from left to right and gives the value lessthan or equal to the given value. '<=' It compares the left operand with right operand.
14. GreaterThan - It evaluates the expression from left to right and '>' It compares the left operand with the right operand 
15. GreaterThan Or Equalto - It evaluates the expression from left to right and '>=' It compares the left operand with the right operand if the left operand is greater or equal to the right operand it generates true.
16. in - In arrays and objects we do have the methods and properties and if they belong to the particular objects or arrays we check by using 'in'. It evaluates from left to right and gives true if they are present in that particular object.
17. instanceof - It evaluates from left to right and gives true if the new object which is created from the particular class  belongs to it own object. 'instanceof'
18. Equality - Equality check only the value, '=='
19. Inequality - Inequality checks only the value, '!='
20. Strict Equality - Strict Equality checks both value and type, '==='
21. Strict Inequality - Strict Inequality checks both value  and type, '!=='
22. Bitwise And - Bitwise AND gives the value 1 if both operands are true. Performs AND operation , '&'
23. Bitwise XOR - Bitwise XOR gives the value as 1 if only the one of the operands are true and otherwise it is false, '^'
24. Bitwise OR - Bitwise OR gives if any of the operand is true. '|'
25. Logical AND- Logical AND gives the truthy value if ond only if both the conditions are true. '&&'
26. Logical OR- Logical OR gives the truthy value if and only if , one of the operands are true. '||'
27. Comma or Sequence - The comma operator evaluates from left to right and returns the value of the last operand. ',' .. lowest priority

Right-to-Left Associativity

1. new(without argument list): To create an instance of existing object.. 'new'.. 
2. logical NOT : Giving the value as truthy if it is false and vice-versa.. '! expression'
3. Bitwise NOT : It gives opposite value for each bit. '~'
4. Unary Plus: It converts the operands into a number. If it can't parse a particular value then it returns a NaN '+'
5. Unary Negation: It negates the operand "-"
6. Pre Increment: It first increment and then assign a value to a operand(++..expr)
7. Pre Decrement:(-- expression) : It first decrements and then assign a value to an operand(--..expression)
8. typeof: It returns the datatype of an object or variable.
9. void : This operator evaluates the expression and returns the undefined






Refer the Homework1.html for the examples of different precendence operators and how they are evaluated.


2. Difference between == and ===  and also != and !==

A: Equality '==' : It checks only the value 

Example: 2 == '2' // true

  Strict Equality '===' : It checks both the value and type

Example: 2 === '2' // false

Not Equality : It checks only the value.

Example: 2 != '2' // False

Strict Not Equality: It checks both value and type 

Example: 2 !== '2' // True





3. Difference between null and undefined?

Both null and undefined are the datatypes.

A: null:  the value is null and type is an object.

Example: var area = null;
         console.log(typeof(area)); // object

         null == 0 // true
         null == false // true


  undefined: when a variable is not declared it returns the type undefined and value is undefined. It returns value also undefined

 Example: var area
          console.log(area); // undefined
          console.log(typeof(area)); // undefined
   
       null == undefined // true
       null === undefined // false


  4. Loop (for, while, do while)  
   
   A: for: for(statement1; statement2; statement3)
               {
               code that has to be executed
                }

   for(i=0;i<10;i++)
            {
            console.log(i + "<br>");
            }


First it will assign a value 0 to the varaible 'i' and then checks the condition if i < 10 then it execute the code in the open and closed braces and then it increments the 'i' value. Then again checks the condition and this time i value incremented to 1 and it satisfies the above condition. It then executes the code in the open and curly braces and then increments the 'i' value. It repeats until the condition satisfies. 

  while : 
  var i = 1
  while(i<10)
  {
  console.log(i);
  i++;
  } 

  It has the value as 1 in 'i'. It compares the 'i' value with 10 and then prints the i value. Then it increments the i value and again comes out of the loop. checks the 'i' value with the 10 and again it follows until the condition is set true.



do while :

var i = 5;
do{
	console.log(i);
	i++;
}
while(i<10);

From the above example the value of i is printed first as 5 and i value incremented to 6 it checks the condition now as i < 10. It is true and it  then prints the value 6. So it executes til the condition remained true.


ifelse:

if(2 == '2'){
	console.log("It is true");
}else
{
	console.log("It is false");
}

From the above example 
if statement is used to compare the 2 conditions and return true it is true otherwise else block will be executed.

switch:

var thisDay = Number(prompt("pleas enter a day", ""));

switch(thisDay) {
	case 1: 
	alert("This day is Monday");
	break;
	case 2:
	 alert("This day is Tuesday") ;
	break;
	default:
	alert("This day is Wednesday") ;

}



To avoid multiple if else statements, switch is used.

From the above example if i gave the number as 1 it prints Monday otherwise it prints this day is wednesday.




site 2: https://github.com/maxogden/javascript-for-cats
site 3: https://en.wikibooks.org/wiki/JavaScript
site 4: http://bonsaiden.github.io/JavaScript-Garden/#core
site 5: http://www.w3schools.com/js/default.asp








